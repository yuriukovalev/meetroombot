import os
import logging
import datetime
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
from data import DATA

# üîπ 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("üî¥ BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env")

# üîπ 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

# üîπ 3. –§–∞–π–ª –ª–æ–≥–æ–≤ üìÇ
LOG_FILE = "bot_usage.log"

def log_action(user_id, action):
    """ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤ """
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"{timestamp} | User {user_id} | {action}\n"
    with open(LOG_FILE, "a") as file:
        file.write(log_entry)

# üîπ 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class BookingState(StatesGroup):
    choosing_city = State()
    choosing_office = State()
    choosing_floor = State()
    choosing_room = State()

# üìå /start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(BookingState.choosing_city)

    log_action(message.from_user.id, "–í–æ—à–µ–ª –≤ –±–æ—Ç–∞ (/start)")

    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=city)] for city in DATA.keys()], resize_keyboard=True
    )

    print(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")  
    await message.answer("üèô –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=markup)

# üìå –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
@dp.message(StateFilter(BookingState.choosing_city), F.text.in_(DATA.keys()))
async def choose_city(message: types.Message, state: FSMContext):
    city = message.text
    await state.update_data(city=city)
    await state.set_state(BookingState.choosing_office)

    log_action(message.from_user.id, f"–í—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {city}")

    offices = DATA.get(city, {})
    if not offices:
        return await message.answer("‚ùå –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ñ–∏—Å–æ–≤.")

    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=office)] for office in offices.keys()] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

    await message.answer(f"üèô –¢—ã –≤—ã–±—Ä–∞–ª {city}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Ñ–∏—Å:", reply_markup=markup)

# üìå –í—ã–±–æ—Ä –æ—Ñ–∏—Å–∞
@dp.message(StateFilter(BookingState.choosing_office), F.text)
async def choose_office(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start(message, state)
        return
    
    user_data = await state.get_data()
    city = user_data.get("city", "")

    office = message.text
    if office not in DATA.get(city, {}):
        return await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –æ—Ñ–∏—Å–∞ –Ω–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

    await state.update_data(office=office)
    log_action(message.from_user.id, f"–í—ã–±—Ä–∞–ª –æ—Ñ–∏—Å: {office} (–ì–æ—Ä–æ–¥: {city})")

    # üè¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ —ç—Ç–∞–∂–∏
    office_data = DATA[city][office]
    if isinstance(office_data, dict) and all(isinstance(v, dict) for v in office_data.values()):
        await state.set_state(BookingState.choosing_floor)
        floors = office_data.keys()

        markup = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=floor)] for floor in floors] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        return await message.answer(f"üè¢ –û—Ñ–∏—Å {office}. –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:", reply_markup=markup)

    await state.set_state(BookingState.choosing_room)
    rooms = office_data
    if not rooms:
        return await message.answer("‚ùå –í —ç—Ç–æ–º –æ—Ñ–∏—Å–µ –Ω–µ—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö.")

    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=room)] for room in rooms.keys()] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

    await message.answer(f"üè¢ –¢—ã –≤—ã–±—Ä–∞–ª {office}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é:", reply_markup=markup)

# üìå –í—ã–±–æ—Ä —ç—Ç–∞–∂–∞
@dp.message(StateFilter(BookingState.choosing_floor))
async def choose_floor(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await choose_office(message, state)
        return

    user_data = await state.get_data()
    city, office = user_data.get("city"), user_data.get("office")

    floor = message.text
    if floor not in DATA.get(city, {}).get(office, {}):
        return await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —ç—Ç–∞–∂–∞ –Ω–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

    await state.update_data(floor=floor)
    await state.set_state(BookingState.choosing_room)

    log_action(message.from_user.id, f"–í—ã–±—Ä–∞–ª —ç—Ç–∞–∂: {floor} (–û—Ñ–∏—Å: {office}, –ì–æ—Ä–æ–¥: {city})")

    rooms = DATA[city][office][floor].keys()
    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=room)] for room in rooms] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

    await message.answer(f"üõó {floor}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é:", reply_markup=markup)

# üìå –í—ã–±–æ—Ä –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@dp.message(StateFilter(BookingState.choosing_room), F.text)
async def choose_room(message: types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user_data = await state.get_data()
        if "floor" in user_data:
            await choose_floor(message, state)
        else:
            await choose_office(message, state)
        return

    user_data = await state.get_data()
    city, office = user_data.get("city"), user_data.get("office")
    floor = user_data.get("floor", "")

    office_data = DATA.get(city, {}).get(office, {})
    rooms = office_data.get(floor, {}) if floor else office_data  

    if message.text not in rooms:
        return await message.answer("‚ùå –¢–∞–∫–æ–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –Ω–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")

    link = rooms[message.text]

    log_action(message.from_user.id, f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é: {message.text} (–û—Ñ–∏—Å: {office}, –ì–æ—Ä–æ–¥: {city}, –≠—Ç–∞–∂: {floor})")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", url=link)]]
    )

    await message.answer("üîì –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(BookingState.choosing_room)

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –¢–µ–ø–µ—Ä—å –í–°–Å –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è üöÄ")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())